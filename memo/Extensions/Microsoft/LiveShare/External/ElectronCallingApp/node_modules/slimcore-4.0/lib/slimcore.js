/// <reference path="slimcore.d.ts" />
"use strict";
const version = require("./version");
const events_1 = require("events");
const native = module.require('../bin/slimcore.node');
function isMatch(value, pattern) {
    // tslint:disable-next-line:no-for-in
    for (const key in pattern) {
        if (!pattern.hasOwnProperty(key)) {
            continue;
        }
        if (value[key] !== pattern[key]) {
            return false;
        }
    }
    return true;
}
function makeFilteredListener(listener, filter) {
    return (args) => {
        if (isMatch(args, filter)) {
            listener(args);
        }
    };
}
class EventEmitterEx extends events_1.EventEmitter {
    handle(event, filter, listener) {
        const callback = filter ? makeFilteredListener(listener, filter) : listener;
        this.addListener(event, callback);
        return {
            dispose: () => {
                this.removeListener(event, callback);
            },
        };
    }
}
// version
exports.getVersion = version.getVersion;
exports.getApiVersion = version.getApiVersion;
// slimcore
exports.createSlimCoreInstance = native.createSlimCoreInstance;
exports.createChromiumFrameSink = native.createChromiumFrameSink;
exports.getInstanceCounts = native.getInstanceCounts;
exports.queryDeviceRotation = native.queryDeviceRotation;
exports.getAuthorizationStatus = native.getAuthorizationStatus;
exports.requestAuthorization = native.requestAuthorization;
const classes = [
    native.SlimCore,
    native.Setup,
    native.Account,
    native.CallHandler,
    native.VideoBinding,
    native.VideoBindingRenderer,
    native.VideoBindingScreenShare,
    native.FrameSink,
    native.ChromiumFrameSink,
    native.ContentSharing,
    native.DataChannel,
    native.DataSource,
    native.DataSink,
    native.Trouter,
    native.TrouterListener,
    native.TrouterRequest,
    native.TrouterResponse,
    native.Ndi,
];
for (const cls of classes) {
    if (Object.getPrototypeOf(cls.prototype) === Object.prototype) {
        Object.setPrototypeOf(cls.prototype, EventEmitterEx.prototype);
    }
    exports[cls.name] = cls;
}
Object.defineProperty(exports, 'Enums', {
    configurable: true,
    enumerable: true,
    get: () => native.Enums,
    set: (value) => { native.Enums = value; },
});
// CallHandler.prototype.getProperties
function invoke(expr, fallback) {
    try {
        return expr();
    }
    catch (error) {
        return fallback;
    }
}
// tslint:disable-next-line:max-line-length
function getProperties(object, objectId, strProperties, intProperties) {
    const result = {};
    markObjectSimple(result);
    for (const [key, item] of Object.entries(strProperties)) {
        result[key] = invoke(() => object.getStrProperty(item.objectId || objectId, item.propKey), item.fallback);
    }
    for (const [key, item] of Object.entries(intProperties)) {
        result[key] = invoke(() => object.getIntProperty(item.objectId || objectId, item.propKey), item.fallback);
    }
    return result;
}
// tslint:disable-next-line:max-line-length
native.CallHandler.prototype.getProperties = function (objectId, strProperties, intProperties) {
    // tslint:disable-next-line:no-invalid-this
    return getProperties(this, objectId, strProperties, intProperties);
};
// tslint:disable-next-line:max-line-length
native.SlimCore.prototype.getProperties = function (objectId, strProperties, intProperties) {
    // tslint:disable-next-line:no-invalid-this
    return getProperties(this, objectId, strProperties, intProperties);
};
function markObjectSimple(object) {
    native._setHiddenProperty(object, 'simple', true);
}
function setAnnotations(func, annotations) {
    if (annotations.returnType !== undefined) {
        native._setHiddenProperty(func, 'returnType', annotations.returnType);
    }
    if (annotations.simpleArgs !== undefined) {
        native._setHiddenProperty(func, 'simpleArgs', annotations.simpleArgs);
    }
}
function makePropertyConstant(object, name) {
    const { get } = Object.getOwnPropertyDescriptor(object, name);
    setAnnotations(get, { returnType: 'constant' });
}
// globals
setAnnotations(exports.getVersion, { returnType: 'constant' });
setAnnotations(exports.getApiVersion, { returnType: 'constant' });
makePropertyConstant(exports, 'Enums');
// SlimCore
setAnnotations(native.SlimCore.prototype.getBuildName, { returnType: 'constant' });
setAnnotations(native.SlimCore.prototype.getBuildVersion, { returnType: 'constant' });
setAnnotations(native.SlimCore.prototype.getMonitorSnapshot, { returnType: 'promise' });
setAnnotations(native.SlimCore.prototype.getWindowSnapshot, { returnType: 'promise' });
setAnnotations(native.SlimCore.prototype.getWindowIcon, { returnType: 'promise' });
setAnnotations(native.SlimCore.prototype.videoCreateBinding, { returnType: 'promise' });
setAnnotations(native.SlimCore.prototype.videoReleaseBinding, { returnType: 'promise' });
// CallHandler
setAnnotations(native.CallHandler.prototype.getProperties, { simpleArgs: true });
// VideoBindingRenderer
setAnnotations(native.VideoBindingRenderer.prototype.captureFrame, { returnType: 'promise' });
// FrameSink
setAnnotations(native.FrameSink.prototype.log, { returnType: 'void' });
// Trouter shim to allow using the same API for TsTrouter/Web and SlimCore/Electron
// while also being IPC efficient (sending across only small plain/simple objects).
// Going to be integrated directly on C++ level in further refactoring/API changes.
const trouterNativeListeners = [];
// tslint:disable:no-invalid-this
native.Trouter.prototype.registerListener2 = function (listener, path) {
    const nativeListener = this.createTrouterListener();
    trouterNativeListeners.push({ remoteId: listener.remoteId, nativeListener: nativeListener });
    nativeListener.on('trouter-connected', (args) => {
        let baseEndpointUrl = args.routingPath.substring(0, args.routingPath.length - path.length);
        if (!baseEndpointUrl.endsWith('/')) {
            baseEndpointUrl += '/';
        }
        const connectionInfo = {
            baseEndpointUrl: baseEndpointUrl,
            newEndpointUrl: args.newPublicUrl,
            clientId: this.getConnectedClientId(),
            connectionId: this.getConnectionId(),
            connectionTtlSec: this.getConnectionTTLInSec(),
        };
        markObjectSimple(connectionInfo);
        listener.onTrouterConnected(args.routingPath, connectionInfo);
    });
    nativeListener.on('trouter-disconnected', (args) => {
        if (listener.onTrouterDisconnected) {
            listener.onTrouterDisconnected();
        }
    });
    nativeListener.on('trouter-request', (args) => {
        const request = {
            id: args.response.getId(),
            method: args.request.getMethod(),
            path: path + args.request.getURLPathComponent(),
            headers: {},
            body: args.request.getBody(),
            _ipcSentTime: Date.now(),
        };
        for (const header of args.request.getHeaders()) {
            request.headers[header.header] = header.value;
        }
        markObjectSimple(request);
        const responseSendFunc = (response) => {
            if (response.status) {
                args.response.setStatus(response.status);
            }
            if (response.headers) {
                for (const name of Object.keys(response.headers)) {
                    args.response.setHeader(name, response.headers[name]);
                }
            }
            if (response.body) {
                args.response.setBody(response.body);
            }
            return args.response.send();
        };
        setAnnotations(responseSendFunc, { simpleArgs: true });
        listener.onTrouterRequest(request, responseSendFunc);
    });
    this.registerListener(nativeListener, path, `Electron:${path}`);
};
native.Trouter.prototype.unregisterListener2 = function (remoteId) {
    // Find all entries that match the remoteId and destroy them properly
    for (let i = 0; i < trouterNativeListeners.length;) {
        if (trouterNativeListeners[i].remoteId === remoteId) {
            this.unregisterListener(trouterNativeListeners[i].nativeListener);
            trouterNativeListeners[i].nativeListener.dispose();
            trouterNativeListeners.splice(i, 1); // Remove 1 element at index i
        }
        else {
            i++;
        }
    }
};
// tslint:enable:no-invalid-this

// SIG // Begin signature block
// SIG // MIIjhAYJKoZIhvcNAQcCoIIjdTCCI3ECAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 3WD6kVpHyco8LLl7NrFb8fiAYLIkjpxmB2VfhGsqszCg
// SIG // gg2BMIIF/zCCA+egAwIBAgITMwAAAVGejY9AcaMOQQAA
// SIG // AAABUTANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTE5MDUwMjIxMzc0NloX
// SIG // DTIwMDUwMjIxMzc0NlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // lVrGhmlHHTQe8VXDZnX2YlQYWBRnJ/CjKsYDSLzmVjR/
// SIG // SWEC7oR4ZieUViEstaHst807sai25BwHZm3lPDRTKOPT
// SIG // 7+9TICEvSBvxLasDh+7qWp/pSKujTnMOXzujrPtdkdEN
// SIG // vDMxp/t8uxdpig56KVbtLBLn8uOd4Mc9ejPGwMOPkF7r
// SIG // +/n0fVs0SdgqVOtsECmIhUDH3sOlYeX7j6F5aDd5OvkJ
// SIG // c+84HE+GEZsc8e4zFaT/7ryurGXAcUN1oAf1pMlx4MWm
// SIG // NfSAMy6tkIj4l9mK8okeRLGAat+QT+1NeQ5WbaUrNsCG
// SIG // E5JAwcYTySAyYKMGbuRsoR3aq7Ldzo5EkQIDAQABo4IB
// SIG // fjCCAXowHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFeCGq5Kue3rGoLuhVAW9u9G
// SIG // Yo3PMFAGA1UdEQRJMEekRTBDMSkwJwYDVQQLEyBNaWNy
// SIG // b3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEWMBQG
// SIG // A1UEBRMNMjMwMDEyKzQ1NDEzNTAfBgNVHSMEGDAWgBRI
// SIG // bmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmg
// SIG // R6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtp
// SIG // b3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDct
// SIG // MDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcw
// SIG // AoZFaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9w
// SIG // cy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDct
// SIG // MDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggIBAFoPgK0uAJ6uyq6ILJSEJ6DB0l1D6/0ajiIS
// SIG // V/t9jm7mNzBb3ZURJW0rEica0cvzggmXUrHvn9gKkPhf
// SIG // 9mmMAQ5lEG3jAfJ9KWC2Zzj4n6nu/EQR9n1WbL18cn4s
// SIG // 2x7m1lqFHzVvxSZWZS18CZhdwaC/BNqdPSt4WoMM/6LX
// SIG // CrUNfkOPg2jmF1pXqiayVLJx7PVIi3K1RdJXi/0NVeW7
// SIG // IaG9jk5WatKs0nazAy1nYcq1DsZ2fqI2e1HU2OFZwrqI
// SIG // G2fWbPbMiW4O2VEvUlYGJKMEbFr+Y1eJW6kw/rRuBc4T
// SIG // sHEUMHW+gPM6djZ3frO1XQrmBbBoCONbnA/KMVX3ADIx
// SIG // fWF+TdrOJpbZKp1Ht/4bVa58SigwMEmJYmrsdi+4CsPm
// SIG // w9ZBGf+aMy0Zyd44w5KJk6z3LaJGPymmdarm9DVJ5jih
// SIG // /t8VCv6ZViSvATkGLlO4CmB+2MvVkijZT+6So+ouNe/t
// SIG // zWv36yJ45wZCkQif3mE7wR/rOYLns6X0FrVOGzaP4/EM
// SIG // Nr6U0PcO35YR+/EZsHd9ffmE5ob+03MQ21pcrXmo+ESt
// SIG // sJN6WNaEs9iTxOTzbjZnfRpn+qHj2YMuyIvSSy6vEp1C
// SIG // 1e2/iD9FF0WPavhnUYzNgBF+prGb7zwiKBtGmB0LvcGb
// SIG // ChCto6r1ovP8XXnnkiPRTeitcOKFUDODMIIHejCCBWKg
// SIG // AwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCB
// SIG // iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWlj
// SIG // cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
// SIG // IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEw
// SIG // OTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQD
// SIG // Ex9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDEx
// SIG // MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
// SIG // q/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4Bjga
// SIG // BEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSH
// SIG // fpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpg
// SIG // GgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpc
// SIG // oRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnn
// SIG // Db6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD
// SIG // 2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLT
// SIG // swM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOE
// SIG // y/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2
// SIG // z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
// SIG // A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL
// SIG // 5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uD
// SIG // jexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyim
// SIG // p31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8Hh
// SIG // hUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX
// SIG // 3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAG
// SIG // CSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXT
// SIG // gqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMA
// SIG // dQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw
// SIG // AwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx
// SIG // 0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3Js
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9N
// SIG // aWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4G
// SIG // CCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNS
// SIG // b29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
// SIG // HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEF
// SIG // BQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUF
// SIG // BwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5
// SIG // AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOS
// SIG // mUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np
// SIG // 22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r
// SIG // 4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION
// SIG // 9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWlu
// SIG // WpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiX
// SIG // mE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ
// SIG // 2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNA
// SIG // BQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPD
// SIG // XVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yH
// SIG // PgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
// SIG // XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbS
// SIG // oqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5
// SIG // GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E9
// SIG // 0Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZO
// SIG // SEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzTGCFVsw
// SIG // ghVXAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAm
// SIG // BgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENB
// SIG // IDIwMTECEzMAAAFRno2PQHGjDkEAAAAAAVEwDQYJYIZI
// SIG // AWUDBAIBBQCgga4wGQYJKoZIhvcNAQkDMQwGCisGAQQB
// SIG // gjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcC
// SIG // ARUwLwYJKoZIhvcNAQkEMSIEIHYoToxb5CsQZcl9rP6l
// SIG // 4/vvodhV9bzOzop08PA6G9oNMEIGCisGAQQBgjcCAQwx
// SIG // NDAyoBSAEgBNAGkAYwByAG8AcwBvAGYAdKEagBhodHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEB
// SIG // BQAEggEAddXBXVqR9Jd5f4Zh2h4SvxPj97FmDGAJASpO
// SIG // mIKH/KTlQQlY+Wx9moQxgR8/CpToSRrp6XezBs/y0C4l
// SIG // 47ZxENoIYNaG+rkRuVj4WVdLb3FqjCvMeDzF8SfxkEh1
// SIG // pCVvMXNDPxwiUu9RoOb5VbgP74j9jTMyIzUiOMLw4/BP
// SIG // RJzuQ44ys9QcJ23B62FSLzqha7wSkBGy2QtzscGLpDkr
// SIG // DMy9Mv7kksMyOXdnaHd55ZLN0E0BUI6wEJ7Ep2tXarpZ
// SIG // YgF8UKirt8P6CSs6lsVnJKbn4NRfS7xDEB+3uNgobfPg
// SIG // 0F1qxD4VirABqd+6m09LEBoro6Z6/S8+7RL+g8jq26GC
// SIG // EuUwghLhBgorBgEEAYI3AwMBMYIS0TCCEs0GCSqGSIb3
// SIG // DQEHAqCCEr4wghK6AgEDMQ8wDQYJYIZIAWUDBAIBBQAw
// SIG // ggFRBgsqhkiG9w0BCRABBKCCAUAEggE8MIIBOAIBAQYK
// SIG // KwYBBAGEWQoDATAxMA0GCWCGSAFlAwQCAQUABCAdjBf9
// SIG // X/6LkHtYG5r5H+xUDP4FMSB2NaeXBP052P7dPQIGXanJ
// SIG // viaBGBMyMDE5MTIwNDAxNDgwMi4zOTVaMASAAgH0oIHQ
// SIG // pIHNMIHKMQswCQYDVQQGEwJVUzELMAkGA1UECBMCV0Ex
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9z
// SIG // b2Z0IElyZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYw
// SIG // JAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpFMDQxLTRCRUUt
// SIG // RkE3RTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgc2VydmljZaCCDjwwggTxMIID2aADAgECAhMzAAAB
// SIG // B343aJiHWjfWAAAAAAEHMA0GCSqGSIb3DQEBCwUAMHwx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTE5MTAw
// SIG // ODE3MzgzNVoXDTIxMDEwMzE3MzgzNVowgcoxCzAJBgNV
// SIG // BAYTAlVTMQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVk
// SIG // bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
// SIG // aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBP
// SIG // cGVyYXRpb25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxl
// SIG // cyBUU1MgRVNOOkUwNDEtNEJFRS1GQTdFMSUwIwYDVQQD
// SIG // ExxNaWNyb3NvZnQgVGltZS1TdGFtcCBzZXJ2aWNlMIIB
// SIG // IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1Lqj
// SIG // lJW2nloq4MGwsIYTSDqk7IaaPkHUmMQLfSZ5HrpUBXiq
// SIG // 0OqzkhAl8cIDoy/0zTCF7ZIoNTGonxTjerIv0YvgLFfB
// SIG // rq0KeH8pScywzBXSXBkqVdwhkXaQ29GrvJDUC5p2bsS8
// SIG // QC/dUe//95h9kA0CNtMNxtOrPl7/Po7PcEJLFwH3JV19
// SIG // UyaASMdT4tRRqgp2NypVvNfj5Yc9E+MkrZtTIJ6h+ESm
// SIG // Mj3XHpqQmAvwSNOD4dhCS/rkEHwH2HW3/bxqqSmI7LpL
// SIG // Z1q+bqMA9x+QLfsd5WB+a8+CQpXio3i6Qf4++B+1WdCO
// SIG // XkxG5bPXtpRCmlM2/aNMI54w3PreAQIDAQABo4IBGzCC
// SIG // ARcwHQYDVR0OBBYEFDTh45cZSCVzHD/Z/9KIGHV/Keh3
// SIG // MB8GA1UdIwQYMBaAFNVjOlyKMZDzQ3t8RhvFM2hahW1V
// SIG // MFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWlj
// SIG // cm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Rp
// SIG // bVN0YVBDQV8yMDEwLTA3LTAxLmNybDBaBggrBgEFBQcB
// SIG // AQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWlj
// SIG // cm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljVGltU3RhUENB
// SIG // XzIwMTAtMDctMDEuY3J0MAwGA1UdEwEB/wQCMAAwEwYD
// SIG // VR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQELBQAD
// SIG // ggEBABjd/+11ksxxio5OOOMPtqtQ95OwYf2WoVL1hxSe
// SIG // hFClOby8xBrHbICUr1lx2Q0a6X+a3FBkMo55aNYQGNZg
// SIG // 7XjShbrIUum3ncXMTxyY3pVWfTdv3ufv+8y7tfGI5ysO
// SIG // Wxbu3VqmATCNydBTq+elyTidSk7TIiYacbom/hVsvqco
// SIG // VVYBxk1B7lHWxNPXWPVsbkbG6W+A3VgFjazwwelQDjud
// SIG // EHxI/tLVvsxeod0YQUyNIpY9PgM4FxPug8ie/26+mlbw
// SIG // hLzUScxOmpCZzMp/5M5gt9i8b0WVihMFg0dBZ83l4+cp
// SIG // 0krWeoon0wT+4Kog7InYLsYfgRV+x8YTdXh3+40wggZx
// SIG // MIIEWaADAgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEB
// SIG // CwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQD
// SIG // EylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRo
// SIG // b3JpdHkgMjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0yNTA3
// SIG // MDEyMTQ2NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAqR0NvHcRijog7PwTl/X6f2mUa3RUENWlCgCChfvt
// SIG // fGhLLF/Fw+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458
// SIG // YTBZsTBED/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN
// SIG // 0Or1R4HNvyRgMlhgRvJYR4YyhB50YWeRX4FUsc+TTJLB
// SIG // xKZd0WETbijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQ
// SIG // YrFd/XcfPfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/Q
// SIG // S/1u5ZrKsajyeioKMfDaTgaRtogINeh4HLDpmc085y9E
// SIG // uqf03GS9pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQAB
// SIG // o4IB5jCCAeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0O
// SIG // BBYEFNVjOlyKMZDzQ3t8RhvFM2hahW1VMBkGCSsGAQQB
// SIG // gjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAP
// SIG // BgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP
// SIG // 6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeG
// SIG // RWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3Js
// SIG // L3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIz
// SIG // LmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKG
// SIG // Pmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2Vy
// SIG // dHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGg
// SIG // BgNVHSABAf8EgZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9
// SIG // BggrBgEFBQcCARYxaHR0cDovL3d3dy5taWNyb3NvZnQu
// SIG // Y29tL1BLSS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggr
// SIG // BgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABp
// SIG // AGMAeQBfAFMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkq
// SIG // hkiG9w0BAQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Eh
// SIG // b7Prpsz1Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ie
// SIG // JeP5vO1rVFcIK1GCRBL7uVOMzPRgEop2zEBAQZvcXBf/
// SIG // XPleFzWYJFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqRUgCv
// SIG // OA8X9S95gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9Z
// SIG // Kby2/QThcJ8ySif9Va8v/rbljjO7Yl+a21dA6fHOmWaQ
// SIG // jP9qYn/dxUoLkSbiOewZSnFjnXshbcOco6I8+n99lmqQ
// SIG // eKZt0uGc+R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjgg
// SIG // tSXlZOz39L9+Y1klD3ouOVd2onGqBooPiRa6YacRy5rY
// SIG // DkeagMXQzafQ732D8OE7cQnfXXSYIghh2rBQHm+98eEA
// SIG // 3+cxB6STOvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvs
// SIG // xsvYgrRyzR30uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjm
// SIG // mC3qjeAzLhIp9cAvVCch98isTtoouLGp25ayp0Kiyc8Z
// SIG // QU3ghvkqmqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8
// SIG // l1Bx16HSxVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8
// SIG // z1gFLu8NoFA12u8JJxzVs341Hgi62jbb01+P3nSISRKh
// SIG // ggLOMIICNwIBATCB+KGB0KSBzTCByjELMAkGA1UEBhMC
// SIG // VVMxCzAJBgNVBAgTAldBMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // LTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJh
// SIG // dGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhhbGVzIFRT
// SIG // UyBFU046RTA0MS00QkVFLUZBN0UxJTAjBgNVBAMTHE1p
// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIHNlcnZpY2WiIwoBATAH
// SIG // BgUrDgMCGgMVAMMLvrX4Bt6wu0Wa8bhTtgpmUnz4oIGD
// SIG // MIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh
// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
// SIG // AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw
// SIG // DQYJKoZIhvcNAQEFBQACBQDhkOycMCIYDzIwMTkxMjAz
// SIG // MjIxNTU2WhgPMjAxOTEyMDQyMjE1NTZaMHcwPQYKKwYB
// SIG // BAGEWQoEATEvMC0wCgIFAOGQ7JwCAQAwCgIBAAICGeIC
// SIG // Af8wBwIBAAICEP8wCgIFAOGSPhwCAQAwNgYKKwYBBAGE
// SIG // WQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAweh
// SIG // IKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUFAAOBgQB8
// SIG // 9TsqCT3f9G4ahp5kMoBFzlqNdMYOCTCAJJIFiSj0OHmn
// SIG // s4YBOL0ywUKTkEyZY0txtilJ3kGKA7B2yFco/JvbWlaG
// SIG // 8/nNj9ICTy3oBxHsrzEfGWpicqQGxFRV5qi8qwcLmCiq
// SIG // 8c8yPYNj+vKr6TDghOdCP6Xcc4LJxk0iwknlmDGCAw0w
// SIG // ggMJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwAhMzAAABB343aJiHWjfWAAAAAAEHMA0GCWCGSAFl
// SIG // AwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcN
// SIG // AQkQAQQwLwYJKoZIhvcNAQkEMSIEID4r6qzrpD5O3m4/
// SIG // 97Dq78br7covvI38T4Vpi9uBgjjCMIH6BgsqhkiG9w0B
// SIG // CRACLzGB6jCB5zCB5DCBvQQgQWLwo+KRZMIbpmoAE59I
// SIG // C4fX3QzcyJkJCjXjrUY/yx4wgZgwgYCkfjB8MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAQd+N2iYh1o3
// SIG // 1gAAAAABBzAiBCBIWBix29l1bnowtyFwiyf6Gs8G8P84
// SIG // PRwNFVvbYO35dDANBgkqhkiG9w0BAQsFAASCAQAKW9e+
// SIG // Ol2enIwVt7NCkO1Xi2pxyWznanPWmlB5WC3+r+5jptcA
// SIG // OqmawQmk+h3qFmlJ2SJJ4weuMPgpAwCETcsqVsUKbj+/
// SIG // YBMkxZQCb71SWUVwEyJPo5FDjbCD+7d8Uxtx10CQ6rr9
// SIG // uO1WEeUJXG/cdpRhRE7ZRHAYF241sH33wvv3SnKAtxqh
// SIG // oGC21QQdw5eTznUrLvxNot3W3lT9Yjl7E9SoC8/LFdeq
// SIG // YjgrstCRuNAAME8lYzfiuk4JMlPIHECgQEA9ya/9+Bm8
// SIG // zJJUsSMibM18QYGzPJ+MgC8Jp6ovcb3G+o5uzo4+x6z3
// SIG // iqh5DFou8eiPQrlD5J6FJDQsPmfC
// SIG // End signature block
