/// <reference path="./slimcore.d.ts" />
/// <reference path="./video-renderer.d.ts" />
'use strict';
const events_1 = require("events");
const API_VERSION = 2;
const SET_VIDEO_PREFERENCE_DEBOUNCE_TIMEOUT = 1000;
// -----------------------------------------------------------------------------
class NoopLogger {
    createChild() { return this; }
    log() { }
    debug() { }
    info() { }
    warn() { }
    error() { }
}
class LoggerProxy {
    constructor(_context, _logger, _frameSink) {
        this._context = _context;
        this._logger = _logger;
        this._frameSink = _frameSink;
    }
    log(message) {
        this._logger.log(message);
        this._log(0 /* Default */, message);
    }
    debug(message) {
        this._logger.debug(message);
        this._log(1 /* Debug */, message);
    }
    info(message) {
        this._logger.info(message);
        this._log(2 /* Info */, message);
    }
    warn(message) {
        this._logger.warn(message);
        this._log(3 /* Warning */, message);
    }
    error(message) {
        this._logger.error(message);
        this._log(4 /* Error */, message);
    }
    _log(level, message) {
        try {
            if (this._frameSink.log) {
                this._frameSink.log(level, `${this._context}: ${message}`);
            }
        }
        catch (error) {
        }
    }
}
// -----------------------------------------------------------------------------
let uniqueId = 0;
function getUniqueId() {
    return ++uniqueId;
}
// -----------------------------------------------------------------------------
class ChromiumVideoRenderer extends events_1.EventEmitter {
    constructor(args, _frameSink) {
        super();
        this._frameSink = _frameSink;
        this._videoElement = null;
        this._videoWidth = 0;
        this._videoHeight = 0;
        this._rendererWidth = 0;
        this._rendererHeight = 0;
        this._pendingTimeout = null;
        this._cleanupHandlers = [];
        this._isDisposed = false;
        if (typeof HTMLSkypeVideoElement !== 'function') {
            const message = 'HTMLSkypeVideoElement is not available';
            throw new VideoRendererError(message, 2 /* Unavailable */);
        }
        if (HTMLSkypeVideoElement.API_VERSION !== API_VERSION) {
            const message = `HTMLSkypeVideoElement - actual version: ${HTMLSkypeVideoElement.API_VERSION}, expected version: ${API_VERSION}`;
            throw new VideoRendererError(message, 2 /* Unavailable */);
        }
        const context = `${this.constructor.name} #${getUniqueId()}`;
        const childLogger = (args.logger || new NoopLogger()).createChild(context);
        this._logger = new LoggerProxy(context, childLogger, _frameSink);
        this._logger.debug(`constructor - args: ${JSON.stringify({
            transparent: args.transparent,
            scalingMode: getScalingMode(args.scalingMode),
            useBufferSharing: args.useBufferSharing,
            useFirstFrameRender: args.useFirstFrameRender,
        })}`);
        this._initialize(args);
    }
    dispose() {
        if (this._logger) {
            this._logger.debug(`dispose`);
        }
        if (this._frameSink) {
            this._frameSink.dispose();
        }
        if (this._cleanupHandlers) {
            this._cleanupHandlers.forEach((handler) => handler());
        }
        if (this._videoElement) {
            this._videoElement.remove();
            const videoElement = this._videoElement;
            setTimeout(() => { videoElement.src = ''; }, 0);
        }
        if (this._pendingTimeout) {
            clearTimeout(this._pendingTimeout);
        }
        delete this._logger;
        delete this._frameSink;
        delete this._videoElement;
        delete this._videoWidth;
        delete this._videoHeight;
        delete this._rendererWidth;
        delete this._rendererHeight;
        delete this._pendingTimeout;
        delete this._cleanupHandlers;
        this._isDisposed = true;
    }
    isDisposed() {
        return this._isDisposed;
    }
    getFrameSink() {
        return this._frameSink;
    }
    getVideoSize() {
        return {
            width: this._videoWidth,
            height: this._videoHeight,
        };
    }
    setScalingMode(mode) {
        this._logger.debug(`setScalingMode: ${mode}`);
        this._videoElement.scalingMode = getScalingMode(mode);
        return Promise.resolve();
    }
    _initialize(args) {
        this._videoElement = this._createVideoElement(args);
        this._addElementToContainer(this._videoElement, args.container);
        this._handleEvent('error', (event) => this._logError(event));
        this._handleEvent('resize', () => this._checkVideoSize());
        this._handleEvent('msLogEvent', (event) => this._logEvent(event));
        this._handleEvent('msRendererSizeChanged', () => this._checkRendererSize());
        this._handleEvent('msBackgroundRenderingChanged', () => this._checkBackgroundRendering());
        const bufferName = this._frameSink.getBufferName();
        this._logger.debug(`loadSync: ${bufferName}`);
        this._videoElement.loadSync(bufferName);
    }
    _createVideoElement(args) {
        const document = args.container.ownerDocument;
        const video = document.createElement('skypevideo');
        video.style.backgroundColor = args.transparent ? '' : 'black';
        video.scalingMode = getScalingMode(args.scalingMode);
        video.bufferSharingEnabled = !!args.useBufferSharing;
        video.firstFrameRenderEnabled = !!args.useFirstFrameRender;
        return video;
    }
    _addElementToContainer(element, container) {
        element.style.width = '100%';
        element.style.height = '100%';
        if (container.hasChildNodes()) {
            this._logger.warn('Appending to a non-empty container');
        }
        container.appendChild(element);
    }
    _handleEvent(type, listener) {
        // tslint:disable-next-line:no-any
        return this._addEventListener(this._videoElement, type, listener);
    }
    _addEventListener(element, type, listener) {
        element.addEventListener(type, listener);
        this._cleanupHandlers.push(() => element.removeEventListener(type, listener));
    }
    _logError(event) {
        if (event instanceof ErrorEvent) {
            this._logger.error(`error: ${event.message}`);
        }
        else {
            this._logger.error(`error: ${formatMediaError(this._videoElement.error)}`);
        }
    }
    _logEvent(event) {
        switch (event.level) {
            case 0 /* Default */:
                this._logger.log(event.message);
                break;
            case 1 /* Debug */:
                this._logger.debug(event.message);
                break;
            case 2 /* Info */:
                this._logger.info(event.message);
                break;
            case 3 /* Warning */:
                this._logger.warn(event.message);
                break;
            case 4 /* Error */:
                this._logger.error(event.message);
                break;
            default:
        }
    }
    _checkVideoSize() {
        const videoWidth = this._videoElement.videoWidth;
        const videoHeight = this._videoElement.videoHeight;
        if (this._videoWidth !== videoWidth || this._videoHeight !== videoHeight) {
            this._videoWidth = videoWidth;
            this._videoHeight = videoHeight;
            this._logger.debug(`video-size-changed: ${videoWidth} x ${videoHeight}`);
            this.emit('video-size-changed', this.getVideoSize());
        }
    }
    _checkRendererSize() {
        let pixelWidth = this._videoElement.clientWidth * devicePixelRatio;
        let pixelHeight = this._videoElement.clientHeight * devicePixelRatio;
        const ratio = this._videoElement.rendererWidth / this._videoElement.rendererHeight;
        if (this._videoElement.scalingMode === 'fit') {
            if (ratio > (pixelWidth / pixelHeight)) {
                pixelHeight = pixelWidth / ratio;
            }
            else {
                pixelWidth = pixelHeight * ratio;
            }
        }
        else if (this._videoElement.scalingMode === 'crop') {
            if (ratio < (pixelWidth / pixelHeight)) {
                pixelHeight = pixelWidth / ratio;
            }
            else {
                pixelWidth = pixelHeight * ratio;
            }
        }
        const rendererWidth = Math.floor(pixelWidth) || 0;
        const rendererHeight = Math.floor(pixelHeight) || 0;
        if (this._rendererWidth !== rendererWidth || this._rendererHeight !== rendererHeight) {
            this._rendererWidth = rendererWidth;
            this._rendererHeight = rendererHeight;
            this._setVideoPreference(rendererWidth, rendererHeight);
        }
    }
    _setVideoPreference(width, height) {
        if (this._pendingTimeout) {
            clearTimeout(this._pendingTimeout);
        }
        const handler = () => {
            this._pendingTimeout = null;
            this._logger.debug(`setVideoPreference: ${width} x ${height} @dpi ${devicePixelRatio}`);
            this._frameSink.setVideoPreference(width, height);
        };
        this._pendingTimeout = setTimeout(handler, SET_VIDEO_PREFERENCE_DEBOUNCE_TIMEOUT);
    }
    _checkBackgroundRendering() {
        this._logger.debug(`backgroundRendering: ${this._videoElement.backgroundRendering}`);
    }
}
exports.ChromiumVideoRenderer = ChromiumVideoRenderer;
// -----------------------------------------------------------------------------
function getScalingMode(mode) {
    switch (mode) {
        case 0 /* Stretch */:
            return 'stretch';
        case 1 /* Crop */:
            return 'crop';
        case 2 /* Fit */:
            return 'fit';
        default:
            return undefined;
    }
}
function formatMediaError(error) {
    switch (error && error.code) {
        case MediaError.MEDIA_ERR_ABORTED:
            return 'MEDIA_ERR_ABORTED';
        case MediaError.MEDIA_ERR_NETWORK:
            return 'MEDIA_ERR_NETWORK';
        case MediaError.MEDIA_ERR_DECODE:
            return 'MEDIA_ERR_DECODE';
        case MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:
            return 'MEDIA_ERR_SRC_NOT_SUPPORTED';
        default:
            return undefined;
    }
}
// -----------------------------------------------------------------------------
class VideoRendererError extends Error {
    constructor(message, reason = 0 /* Unknown */) {
        super(message);
        this.reason = reason;
    }
}
// -----------------------------------------------------------------------------
function createChromiumVideoRenderer(frameSink, args) {
    return new ChromiumVideoRenderer(args, frameSink);
}
exports.createChromiumVideoRenderer = createChromiumVideoRenderer;
function isChromiumVideoRendererAvailable() {
    return typeof HTMLSkypeVideoElement === 'function' && HTMLSkypeVideoElement.API_VERSION === API_VERSION;
}
exports.isChromiumVideoRendererAvailable = isChromiumVideoRendererAvailable;

// SIG // Begin signature block
// SIG // MIIjhAYJKoZIhvcNAQcCoIIjdTCCI3ECAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // qzE2oNEdeztgDp6W9uiczV4LrwCln1+gTNjnb3Kcu4Cg
// SIG // gg2BMIIF/zCCA+egAwIBAgITMwAAAVGejY9AcaMOQQAA
// SIG // AAABUTANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTE5MDUwMjIxMzc0NloX
// SIG // DTIwMDUwMjIxMzc0NlowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // lVrGhmlHHTQe8VXDZnX2YlQYWBRnJ/CjKsYDSLzmVjR/
// SIG // SWEC7oR4ZieUViEstaHst807sai25BwHZm3lPDRTKOPT
// SIG // 7+9TICEvSBvxLasDh+7qWp/pSKujTnMOXzujrPtdkdEN
// SIG // vDMxp/t8uxdpig56KVbtLBLn8uOd4Mc9ejPGwMOPkF7r
// SIG // +/n0fVs0SdgqVOtsECmIhUDH3sOlYeX7j6F5aDd5OvkJ
// SIG // c+84HE+GEZsc8e4zFaT/7ryurGXAcUN1oAf1pMlx4MWm
// SIG // NfSAMy6tkIj4l9mK8okeRLGAat+QT+1NeQ5WbaUrNsCG
// SIG // E5JAwcYTySAyYKMGbuRsoR3aq7Ldzo5EkQIDAQABo4IB
// SIG // fjCCAXowHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFFeCGq5Kue3rGoLuhVAW9u9G
// SIG // Yo3PMFAGA1UdEQRJMEekRTBDMSkwJwYDVQQLEyBNaWNy
// SIG // b3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEWMBQG
// SIG // A1UEBRMNMjMwMDEyKzQ1NDEzNTAfBgNVHSMEGDAWgBRI
// SIG // bmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmg
// SIG // R6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtp
// SIG // b3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDct
// SIG // MDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcw
// SIG // AoZFaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9w
// SIG // cy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDct
// SIG // MDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQEL
// SIG // BQADggIBAFoPgK0uAJ6uyq6ILJSEJ6DB0l1D6/0ajiIS
// SIG // V/t9jm7mNzBb3ZURJW0rEica0cvzggmXUrHvn9gKkPhf
// SIG // 9mmMAQ5lEG3jAfJ9KWC2Zzj4n6nu/EQR9n1WbL18cn4s
// SIG // 2x7m1lqFHzVvxSZWZS18CZhdwaC/BNqdPSt4WoMM/6LX
// SIG // CrUNfkOPg2jmF1pXqiayVLJx7PVIi3K1RdJXi/0NVeW7
// SIG // IaG9jk5WatKs0nazAy1nYcq1DsZ2fqI2e1HU2OFZwrqI
// SIG // G2fWbPbMiW4O2VEvUlYGJKMEbFr+Y1eJW6kw/rRuBc4T
// SIG // sHEUMHW+gPM6djZ3frO1XQrmBbBoCONbnA/KMVX3ADIx
// SIG // fWF+TdrOJpbZKp1Ht/4bVa58SigwMEmJYmrsdi+4CsPm
// SIG // w9ZBGf+aMy0Zyd44w5KJk6z3LaJGPymmdarm9DVJ5jih
// SIG // /t8VCv6ZViSvATkGLlO4CmB+2MvVkijZT+6So+ouNe/t
// SIG // zWv36yJ45wZCkQif3mE7wR/rOYLns6X0FrVOGzaP4/EM
// SIG // Nr6U0PcO35YR+/EZsHd9ffmE5ob+03MQ21pcrXmo+ESt
// SIG // sJN6WNaEs9iTxOTzbjZnfRpn+qHj2YMuyIvSSy6vEp1C
// SIG // 1e2/iD9FF0WPavhnUYzNgBF+prGb7zwiKBtGmB0LvcGb
// SIG // ChCto6r1ovP8XXnnkiPRTeitcOKFUDODMIIHejCCBWKg
// SIG // AwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCB
// SIG // iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWlj
// SIG // cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
// SIG // IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEw
// SIG // OTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQD
// SIG // Ex9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDEx
// SIG // MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA
// SIG // q/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4Bjga
// SIG // BEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSH
// SIG // fpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpg
// SIG // GgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpc
// SIG // oRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnn
// SIG // Db6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD
// SIG // 2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLT
// SIG // swM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOE
// SIG // y/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2
// SIG // z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
// SIG // A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL
// SIG // 5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uD
// SIG // jexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyim
// SIG // p31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8Hh
// SIG // hUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX
// SIG // 3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAG
// SIG // CSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXT
// SIG // gqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMA
// SIG // dQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUw
// SIG // AwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx
// SIG // 0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3Js
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9N
// SIG // aWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4G
// SIG // CCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNS
// SIG // b29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
// SIG // HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEF
// SIG // BQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUF
// SIG // BwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5
// SIG // AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOS
// SIG // mUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np
// SIG // 22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r
// SIG // 4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION
// SIG // 9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWlu
// SIG // WpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiX
// SIG // mE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ
// SIG // 2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNA
// SIG // BQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPD
// SIG // XVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yH
// SIG // PgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
// SIG // XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbS
// SIG // oqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5
// SIG // GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E9
// SIG // 0Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZO
// SIG // SEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzTGCFVsw
// SIG // ghVXAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAm
// SIG // BgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENB
// SIG // IDIwMTECEzMAAAFRno2PQHGjDkEAAAAAAVEwDQYJYIZI
// SIG // AWUDBAIBBQCgga4wGQYJKoZIhvcNAQkDMQwGCisGAQQB
// SIG // gjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcC
// SIG // ARUwLwYJKoZIhvcNAQkEMSIEILk7FlhQVn0GZuDztd/P
// SIG // H3KTTun9WWHfaY3ruHDi9OMdMEIGCisGAQQBgjcCAQwx
// SIG // NDAyoBSAEgBNAGkAYwByAG8AcwBvAGYAdKEagBhodHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEB
// SIG // BQAEggEAJuzezTi5SBk3wS4Z46/BF6FetTFbFfeGsxHu
// SIG // eCJLJyVi+0THUFCOKyESmh1EcFFxZFUn/4HPsxG1WVY4
// SIG // N7jQnnKgNrD0sYSIHlqhUcJVAFDurgnooLd6rmCT9dbo
// SIG // fijcKvwYTpLvqJYSu1tc1RN5BpvGtMMyKUeC45vjASwg
// SIG // BigQExeED397J2wGm6cuqcLkC8nDc9ixK+AEqRcYbFVT
// SIG // /xtXbU1G076LLcjpIMQm5p1g9NiAYHdzly58j/J+U1ed
// SIG // Ujs44FK8/oETpciG94Wk2F4X8GoezD/aDzL+0Uhqb/th
// SIG // i0OPsLZdiRIFernJXjrJdlVt6BKDsQzlTmIJkIjvCKGC
// SIG // EuUwghLhBgorBgEEAYI3AwMBMYIS0TCCEs0GCSqGSIb3
// SIG // DQEHAqCCEr4wghK6AgEDMQ8wDQYJYIZIAWUDBAIBBQAw
// SIG // ggFRBgsqhkiG9w0BCRABBKCCAUAEggE8MIIBOAIBAQYK
// SIG // KwYBBAGEWQoDATAxMA0GCWCGSAFlAwQCAQUABCCaKDVw
// SIG // BnC0CmEIihFFJFN/sPM0v6wcySIAk5FtWHQdKgIGXbhi
// SIG // OEW1GBMyMDE5MTIwNDAxNDgwMi43OThaMASAAgH0oIHQ
// SIG // pIHNMIHKMQswCQYDVQQGEwJVUzELMAkGA1UECBMCV0Ex
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9z
// SIG // b2Z0IElyZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYw
// SIG // JAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpGQzQxLTRCRDQt
// SIG // RDIyMDElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgU2VydmljZaCCDjwwggTxMIID2aADAgECAhMzAAAB
// SIG // EiRzozWGaRMPAAAAAAESMA0GCSqGSIb3DQEBCwUAMHwx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jv
// SIG // c29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTE5MTAy
// SIG // MzIzMTkyMVoXDTIxMDEyMTIzMTkyMVowgcoxCzAJBgNV
// SIG // BAYTAlVTMQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVk
// SIG // bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
// SIG // aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBP
// SIG // cGVyYXRpb25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxl
// SIG // cyBUU1MgRVNOOkZDNDEtNEJENC1EMjIwMSUwIwYDVQQD
// SIG // ExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIB
// SIG // IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu6qZ
// SIG // FTcvUER3cKUQtII+fc65iE3g/nzOFBWXlhq0natrEhYi
// SIG // Fban6yB2g63om0QbMNOFeMHJqYGm3ZRfvBgTYOEWfmjy
// SIG // KStpNuUKTBmFSSxUkrGxDjgVkhyKkGH8ccm0tC7bp96h
// SIG // nQaibH3YZXzKvi+BN2gJcsRMH5Pag2bh1Fd8vRMlMHxy
// SIG // w4bBKWWwpKTSG40bxbGu8CXesKGRAQXdaSXu5smJqyjJ
// SIG // c3l4b9JNxsI77b05ftEwnU4IwqWKaLafgQDaqVB9knFm
// SIG // aVnrnvBS+2iA3YrVbnkxll51Cr3HhPTwL0IlCbKmyn5V
// SIG // zKS+TCB7SUk+emsVreWqTcMj/q8eCQIDAQABo4IBGzCC
// SIG // ARcwHQYDVR0OBBYEFNI6cB8LTElgKyq0wjLMBsZ2ZVtd
// SIG // MB8GA1UdIwQYMBaAFNVjOlyKMZDzQ3t8RhvFM2hahW1V
// SIG // MFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWlj
// SIG // cm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Rp
// SIG // bVN0YVBDQV8yMDEwLTA3LTAxLmNybDBaBggrBgEFBQcB
// SIG // AQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWlj
// SIG // cm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljVGltU3RhUENB
// SIG // XzIwMTAtMDctMDEuY3J0MAwGA1UdEwEB/wQCMAAwEwYD
// SIG // VR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQELBQAD
// SIG // ggEBADkRL6+Rr9IK9WNFlicuz6GQuZX3YQOb552L+/8Q
// SIG // LNlrlf3VARdRLxP9qc+tRMui6Y06H6xMT+WShwmrVVtL
// SIG // TUERI+Gvkc9hZz7/oMflUVZe1sD2mV3SIl8IZlCr3KLe
// SIG // XXGlFVEFccYAc3J0y3P/ZwhP/xOqGcPEKzDwra4qKuhI
// SIG // iBMXk5E7mzu2LL0893ZgXQ33P4CBbXx6e0xWo4Ev38ti
// SIG // OrXTK2rUAnndOSyYOaEiFmLxbNMWsMYumqDDdRapwttc
// SIG // QCEQBJjgzdPVf9Ma66apKiKfDlP987i0CvgUZm6fK0gD
// SIG // /tgTgB20atNJGhqG3eard9HxbD2qhum8J9i9R+AwggZx
// SIG // MIIEWaADAgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEB
// SIG // CwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQD
// SIG // EylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRo
// SIG // b3JpdHkgMjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0yNTA3
// SIG // MDEyMTQ2NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
// SIG // AQEAqR0NvHcRijog7PwTl/X6f2mUa3RUENWlCgCChfvt
// SIG // fGhLLF/Fw+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458
// SIG // YTBZsTBED/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN
// SIG // 0Or1R4HNvyRgMlhgRvJYR4YyhB50YWeRX4FUsc+TTJLB
// SIG // xKZd0WETbijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQ
// SIG // YrFd/XcfPfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/Q
// SIG // S/1u5ZrKsajyeioKMfDaTgaRtogINeh4HLDpmc085y9E
// SIG // uqf03GS9pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQAB
// SIG // o4IB5jCCAeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0O
// SIG // BBYEFNVjOlyKMZDzQ3t8RhvFM2hahW1VMBkGCSsGAQQB
// SIG // gjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAP
// SIG // BgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP
// SIG // 6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeG
// SIG // RWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3Js
// SIG // L3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIz
// SIG // LmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKG
// SIG // Pmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2Vy
// SIG // dHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGg
// SIG // BgNVHSABAf8EgZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9
// SIG // BggrBgEFBQcCARYxaHR0cDovL3d3dy5taWNyb3NvZnQu
// SIG // Y29tL1BLSS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggr
// SIG // BgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABp
// SIG // AGMAeQBfAFMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkq
// SIG // hkiG9w0BAQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Eh
// SIG // b7Prpsz1Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ie
// SIG // JeP5vO1rVFcIK1GCRBL7uVOMzPRgEop2zEBAQZvcXBf/
// SIG // XPleFzWYJFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqRUgCv
// SIG // OA8X9S95gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9Z
// SIG // Kby2/QThcJ8ySif9Va8v/rbljjO7Yl+a21dA6fHOmWaQ
// SIG // jP9qYn/dxUoLkSbiOewZSnFjnXshbcOco6I8+n99lmqQ
// SIG // eKZt0uGc+R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjgg
// SIG // tSXlZOz39L9+Y1klD3ouOVd2onGqBooPiRa6YacRy5rY
// SIG // DkeagMXQzafQ732D8OE7cQnfXXSYIghh2rBQHm+98eEA
// SIG // 3+cxB6STOvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvs
// SIG // xsvYgrRyzR30uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjm
// SIG // mC3qjeAzLhIp9cAvVCch98isTtoouLGp25ayp0Kiyc8Z
// SIG // QU3ghvkqmqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8
// SIG // l1Bx16HSxVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8
// SIG // z1gFLu8NoFA12u8JJxzVs341Hgi62jbb01+P3nSISRKh
// SIG // ggLOMIICNwIBATCB+KGB0KSBzTCByjELMAkGA1UEBhMC
// SIG // VVMxCzAJBgNVBAgTAldBMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // LTArBgNVBAsTJE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJh
// SIG // dGlvbnMgTGltaXRlZDEmMCQGA1UECxMdVGhhbGVzIFRT
// SIG // UyBFU046RkM0MS00QkQ0LUQyMjAxJTAjBgNVBAMTHE1p
// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAH
// SIG // BgUrDgMCGgMVABLgK9aEKr7Q8p7XpXg4xcwzAoq8oIGD
// SIG // MIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh
// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
// SIG // AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw
// SIG // DQYJKoZIhvcNAQEFBQACBQDhkQSaMCIYDzIwMTkxMjAz
// SIG // MjM1ODE4WhgPMjAxOTEyMDQyMzU4MThaMHcwPQYKKwYB
// SIG // BAGEWQoEATEvMC0wCgIFAOGRBJoCAQAwCgIBAAICHhQC
// SIG // Af8wBwIBAAICEfowCgIFAOGSVhoCAQAwNgYKKwYBBAGE
// SIG // WQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAweh
// SIG // IKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUFAAOBgQCS
// SIG // q3U6+YHUJrrUqO5+N0GMMurPkGXsa7z+EzhZY/uze9Bj
// SIG // oHGkHxIsJ+gcyiFS4R2hMNYXAQIxAJ/9trptiNu9gkT5
// SIG // SJxl3cunE8+pVT8xSVL5QmrAnVK39nSMfYC+Djp8AEbS
// SIG // w9GZcppSu1mP+WT+3XcdUJ+NHJd5GTmswiVMOjGCAw0w
// SIG // ggMJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwAhMzAAABEiRzozWGaRMPAAAAAAESMA0GCWCGSAFl
// SIG // AwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcN
// SIG // AQkQAQQwLwYJKoZIhvcNAQkEMSIEIPQuz1+43jOHJoFY
// SIG // 1S/aHyxzy5rhTI3z85RdyeAasqkSMIH6BgsqhkiG9w0B
// SIG // CRACLzGB6jCB5zCB5DCBvQQgJBKwgr/oIhqKqTnIKXhi
// SIG // 2KT7J37JGDCPgxE0dZc6llMwgZgwgYCkfjB8MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAARIkc6M1hmkT
// SIG // DwAAAAABEjAiBCCLgyfXLvkqWkA/5964y4IXhDeC3KOs
// SIG // 4NPiYuPh6gBEqDANBgkqhkiG9w0BAQsFAASCAQBWKtNt
// SIG // ngrcZTGqgtNsNn8tiViG4rmUDLr9o8Y00v+X0/WSuZ4Z
// SIG // GJjkWLUfzU//q8C7K/Xa5VJ2Fi5+75KGMf5m7ehsxxzE
// SIG // Xt4gw2v0AAE3sggYPbFsBKSFOwmyMs0v/UNjY5J51Cbt
// SIG // FZRtIu/QaB+sM9pu/5r4tYX6FbtBk0N9geD9iwEt8PXH
// SIG // JzFn3+5oO4Gp7V8cLlVpTm2jOuwGsCCbySrqm5mpLgf4
// SIG // EmTUuSFAAwkjlVgdAji4VbYMl+j/T6CvkFjBHrhXA7iy
// SIG // IoKx4ZNWIo5Ly2yKNRM07195DjHeBlYFtTnFA7GcaOEs
// SIG // EtHmUeS77MrvV1LzJWxp3XB0Jt2U
// SIG // End signature block
