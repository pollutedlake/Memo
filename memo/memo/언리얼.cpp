/*
▶ 엔진이란?
- 라이브러리 집합체 + 에디터(Tool) 추가한것이 엔진의 정의

- 엔진 왜 쓸까?

- 개발 기간 단축(그래픽)
ㄴ 수학 + 물리 종결 -> 3D에서 많이 정체가 되기 시작한다.
다이렉트 + 불칸은 해야한다.

- 그래픽스 프로그래밍
- 양대 산맥
ㄴ DX VS OpenGL
이제 떠오르는 불칸(레이 트레이싱에 특화)

- DX와 OpenGL의 차이점?
ㄴ 좌표계 (마야 / 맥스까지도 전부 영향을 받는다.)
	ㄴ 왼손 / 오른손
		ㄴ 차이는 Z축의 진행 방향과 X축의 방향
DX의 장점 : Low한 레벨에서 최적화가 좋다.
DX의 단점 : 윈도우에 종속된다.
DX는 윈도우에 종속되기 때문에 엔진에서 OpenGL까지 같이 지원한다.
OpenGL은 플랫폼에 종속되지 않기 때문에

- 왼손 / 오른손 좌표계?
ㄴ 기본 베이스는 DX -> 언리얼
	유니티 -> OpenGL
ㄴ 그리고 또다른 차이점은 월드 좌표에 차이가 발생한다.
	ㄴ SRT / TRS (Scale, Rotation, Transform)

- DX -> 윈도우즈 (CPU가 필요하지 않고 GPU만 쓰는 경우도 있다)
ㄴ DX9 / 10 / 11 / 12
ㄴ 9- > 11
ㄴ 9 이후부터는 안티 얼라이싱을 안쓰고 쉐이더계산이 파이프라인에 들어가 9부터 공부
ㄴ Tessellation : 선명하지만 연산이 많다

- OpenGL -> 플랫폼 X (최소한의 CPU가 필요 ex) 엘리베이터)

▶ 렌더링 파이프라인
그래픽 공정 과정
- 파이프라인에는 기본적으로 다양한 종류가 있다.
ㄴ built-in, SRP, URP, HDRP
built-in : 커스텀해서 쓰고 싶을 때 사용
SRP : 다이렉트나 OpenGL의 파이프라인 코드기반
URP : 유니티 또는 언리얼에서 재정의한 파이프라인
HDRP : High Dynamic Rendering Pipeline 쉐이더(광원, 음영, VFX 파티클시스템) 전용 파이프라인
이펙트 : 이미지 기반 처리, CPU처리
파티클 : 입자 기반 처리, Vertex들의 집합, GPU 처리

- 파이프라인마다 세부적인 내용에는 차이가 있지만 큰 틀은 벗어나지 않는다.
ㄴ Fixed PipeLine(정적) - 프로그래머가 관여 X, DX9 / Progammable PipeLine(동적) - 프로그래머가 관여 O, DX 11

1. 로컬 스페이스
ㄴ 디자이너의 영역
ㄴ 오브젝트 좌표계

2. 월드 스페이스
ㄴ 가상의 공간을 만들고 적용을 하기전 단계(★★★★★SRT★★★★★)

3. 뷰 스페이스
ㄴ 카메라 공간이라고 할 수 있다.

4. 백 스페이스 컬링(후면 추려내기)
ㄴ tearing 현상 발생 원인
ㄴ 뒷면을 그리지 않는다.
ㄴ DX나 엔진에서 알아서 해준다.

★★★★★
5. 라이트
ㄴ 너희의 무덤... -> 최적화에 핵심중 1개
ㄴ 크게 정반사(Specular)와 ex) 후레쉬 / 난반사(Diffuse) ex) 햇빛의 그림자
ㄴ 종류 : Point(점) / Directional(방향성) / Spot(점적) ex) 가로등 / Ambient(주변광)
	ㄴ 재질 : Ambient(주변) / Diffuse(확산) / Specular(반사) / Emissive(방출)

6. 클리핑
ㄴ 카메라 각도 외의 물체들을 렌더링하지 않는다.

7. 프로젝션(투영)
ㄴ 3D -> 2D로 변환하는 과정
ㄴ 크게 2가지 기법이 존재한다.

1. Perspective (원근 투영)
ㄴ 3D
ㄴ 원근감을 표현하겠다. 거리에 따라 스케일 변화

2. Orthographic ( 직교 투영)
ㄴ 2D
ㄴ 원근감 없이 수직 위에서 내려다 보듯이 투영한다.

8. 뷰포트
ㄴ 모니터 화면에 올린다.

9. 레스터라이즈(픽셀 보간)
ㄴ 폴리곤 -> 픽셀로
ㄴ 스크린 좌표로 정점들을 변환하면 폴리곤 정보를 가지게 된다.
ㄴ 래스터라이즈는 각각의 폴리곤을 출력하는데 필요한 픽셀컬러 값을 계산하는 과정
ㄴ 기본적으로 컴퓨터가 처리한다.																				
*/